#include "simulationservices_lar1nd.fcl"
#include "singles_lar1nd.fcl"
#include "largeantmodules_lar1nd.fcl"
#include "detsimmodules_lar1nd.fcl"
#include "caldata_lar1nd.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::lar1nd_simulation_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::lar1nd_singlep	  
   largeant:  @local::lar1nd_largeant	  
   daq:       @local::lar1nd_simwire       
   caldata:       @local::lar1nd_calwire     
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, daq, caldata, rns ] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen.root" #default file name, can override from command line with -o or --output
 }
}

services.user.SignalShapingServiceT1053.ASICGainInMVPerFC: 14


physics.producers.generator.X0: [ 100 ]
physics.producers.generator.Y0: [ 100 ]
physics.producers.generator.Z0: [ 10 ]
physics.producers.generator.ThetaXZ0: [ 10 ]
