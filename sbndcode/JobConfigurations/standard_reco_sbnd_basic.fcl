#include "services_sbnd.fcl"
#include "caldata_sbnd.fcl"
#include "hitfindermodules_sbnd.fcl"
#include "cluster_sbnd.fcl"
#include "trackfindermodules_sbnd.fcl"
#include "calorimetry_sbnd.fcl"
#include "showerfindermodules.fcl"
##include "opticaldetectormodules_sbnd.fcl"
#include "vertexfindermodules.fcl"
##include "pandoramodules.fcl"
##include "triggeralgo_service.fcl"
##include "photpropservices_sbnd.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::sbnd_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::sbnd_simulation_services
}
#services.user.PhotonVisibilityService: @local::sbnd_photonvisibilityservice
services.user.DatabaseUtil.ShouldConnect: false

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
  ### random number saver
  rns:                 { module_type: RandomNumberSaver }

  ### flash finders
 # opflash:             @local::sbnd_opflash

  ### calwire producers
  caldata:             @local::sbnd_calwire

  ### hit-finder producers
  gaushit:             @local::sbnd_gaushitfinder
#  rffhit:              @local::sbnd_rffhitfinder

  ### corner-finder
  corner:              @local::standard_cornerfinder    

  ### cluster-finder producers
  fuzzycluster:        @local::sbnd_fuzzycluster
  cccluster:           @local::sbnd_clustercrawler

  ### pandora
 # pandora:             @local::standard_pandora
  
  ### track-finder producers
  trackkalmanhit:      @local::sbnd_track3Dkalmanhit
  spacepointfinder:    @local::sbnd_spacepoint_finder
  trackkalsps:         @local::sbnd_kalman
  stitch:	       @local::sbnd_trackstitcher
  stitchkalmanhit:     @local::sbnd_trackstitcher
  beziertracker:       @local::sbnd_beziertrackermodule
  spacepointfindercc:  @local::sbnd_spacepoint_finder
  trackkalspscc:       @local::sbnd_kalman
  stitchcc:	       @local::sbnd_trackstitcher
  beziertrackercc:     @local::sbnd_beziertrackermodule

  ### shower-finder producers

  ### vertex-finder producers

  ### calorimetry producers
  trackkalmanhitcalo:  @local::sbnd_calomc
  trackkalspscalo:     @local::sbnd_calomc
  stitchcalo:          @local::sbnd_calomc
  beziercalo:          @local::sbnd_beziercalorimetry

  ### flash-track matching
 # beamflashcompat:     @local::standard_beamflashcompat
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns,
  #       opflash,
         caldata, 
         gaushit,
   # rffhit,
   #      corner,
         fuzzycluster, cccluster, 
   #      pandora,
         spacepointfindercc, trackkalspscc, stitchcc, beziertrackercc, 
         trackkalmanhitcalo, trackkalspscalo, stitchcalo, beziercalo
#         beamflashcompat
 ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_reco.root"
   dataTier:    "reconstructed"
   compressionLevel: 1
 }
}


### Here, we overwrite ALL module labels with the ones defined above.


physics.producers.caldata.DigitModuleLabel:                     "daq"

physics.producers.gaushit.CalDataModuleLabel:                   "caldata"
#physics.producers.rffhit.CalDataModuleLabel:                    "caldata"


physics.producers.fuzzycluster.HitsModuleLabel:                 "gaushit"
physics.producers.fuzzycluster.CalDataModuleLabel:              "caldata"


physics.producers.cccluster.CalDataModuleLabel:                 "caldata"
physics.producers.cccluster.CCHitFinderAlg.CalDataModuleLabel:  "caldata"



physics.producers.spacepointfindercc.ClusterModuleLabel:        "cccluster"

physics.producers.trackkalspscc.ClusterModuleLabel:             "cccluster"
physics.producers.trackkalspscc.SpptModuleLabel:                "spacepointfindercc"
physics.producers.trackkalspscc.GenieGenModuleLabel:            "generator"
physics.producers.trackkalspscc.G4ModuleLabel:                  "largeant"

physics.producers.stitchcc.TrackModuleLabel:                    "trackkalspscc"
physics.producers.stitchcc.SpptModuleLabel:                     "spacepointfindercc"

physics.producers.beziertrackercc.ClusterModuleLabel:           "cccluster"

physics.producers.trackkalmanhitcalo.TrackModuleLabel:          "trackkalmanhitcc"
physics.producers.trackkalmanhitcalo.SpacePointModuleLabel:     "trackkalmanhitcc"

physics.producers.trackkalspscalo.TrackModuleLabel:             "trackkalspscc"
physics.producers.trackkalspscalo.SpacePointModuleLabel:        "spacepointfindercc"

physics.producers.stitchcalo.TrackModuleLabel:                  "stitchcc"
physics.producers.stitchcalo.SpacePointModuleLabel:             "spacepointfindercc"

physics.producers.beziercalo.BTrackModuleLabel:                 "beziertrackercc"





