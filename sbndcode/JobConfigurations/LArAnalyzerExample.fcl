#include "services_sbnd.fcl"
#include "singles_sbnd.fcl"
#include "largeantmodules_sbnd.fcl"
#include "detsimmodules_sbnd.fcl"
#include "analysistreemodule.fcl"
#include "channelstatus_sbnd.fcl"

process_name: Analyzer

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "histo_anatree.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::sbnd_simulation_services
  #@table:: @local::sbnd_simulation_services
  #SeedService: @local::random_seedservice
  ChannelStatusService:           @local::sbnd_channelstatus
}


#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1         # Number of events to create
  
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
   {

   }
 
 
 filters:  
    {
    
    
    } 
 analyzers:
    {
    analysistree:  @local::sbnd_LarAnalyzerEg
    
    } 

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ ] 
 ana:  [ analysistree ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1, ana]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "out.root" #default file name, can override from command line with -o or --output
 }
}



