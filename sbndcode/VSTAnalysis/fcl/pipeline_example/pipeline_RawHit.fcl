#include "geometry_lariat.fcl"
#include "hitfindermodulesVST.fcl"
#include "channelstatus_sbnd.fcl"
#include "resourcemonitorservices_sbnd.fcl"
#include "vst_channel_map.fcl"


physics:
{
  producers:
  {
    rawhit:             @local::standard_fasthitfinderVST
  }

  analyzers:
  {
    VSTAnalysis:
    {
      module_type: VSTAnalysis
      producer_name: daq
      threshold_calc: 3
      threshold_sigma: 5
      noise_range_sampling: 1
      n_smoothing_samples: 9
      use_planes: true
      verbose: false
      baseline_calc: 2

      HitsModuleLabel: "rawhit"
      UseRawHits: false
      DoPurityAna: true
      CosmicRun: true 

      fft_per_channel: false
      timing: false
      sum_waveforms: false

      # Purity configuration
      min_col_hits    :40       # Minimum number of collection plane hits
      min_ind_hits    :20       # Minimum number of induction plane hits
      chi2_cut        :40       # Minimum chi2/ndof after 2 linear fits 
      pca_cut         :-1       # Maximum value of principal component analysis
      min_wires       :50       # Minimum extent of track in wire number
      min_ticks       :100      # Minimum extent of track in time [ticks]
      min_overlap     :0.8      # Minimum percentage overlap of col/ind tracks in time
      charge_width    :6.5      # Sigma multiplier for landau tail cut
      shaping_time    :2        # Shaping time [us]
      drift_vel       :1.50638  # Drift velocity[mm/us]
      wire_spacing    :4.       # Wire spacing [mm]
      angle_cut       :60       # Maximum value of angle to wire planes? [degrees]
      force_angle_cut :false    # Use the angle cut rather than atan(st*dv/ws)
      do_angle_cut    :false    # Apply the angle cut
      lifetime_plots  :false    # Make plots
      purity_verbose  :false    # Print stuff

    }
  }

  my_producer_modules: [rawhit]

  outstream: [out1]
  analyze: [VSTAnalysis]
  end_paths: [outstream, analyze]
}

outputs:
{
  out1:
  {
    module_type: RootOutput 
    #dropAllEvents:true		
   			    
    fileName: "decoder_out.root"
  }
}

services:
{
  TFileService: { fileName: "out.root"}
  Geometry: @local::lariat_geo
  ExptGeoHelperInterface: @local::lariat_geometry_helper
  ChannelStatusService:   @local::vst_channelstatus
  VSTChannelMap: @local::nevis_integration_channel_map_VST
  @table::sbnd_resourcemonitorservices
  
} 

source:
{
  module_type: RootInput
  fileNames: ["/home/nfs/gputnam/lariat_data.root"]
}

physics.producers.rawhit.DigitModuleLabel:    "daq"
physics.producers.rawhit.MinSigInd:           10
physics.producers.rawhit.MinSigCol:           10
physics.producers.rawhit.UncompressWithPed:         false 
physics.producers.rawhit.CollectionNeg: false
physics.producers.rawhit.PedestalSubtracted: false

process_name: PIPELINE

