#include "vst_channel_map.fcl"

events_to_generate: 50
run_number: 105

fragment_receiver: {
  generator: NevisTPCFile
  fragment_type: NevisTPC
  fragment_id: 0
  board_id: 0
  //InputFilename: "/sbnd/data/users/gputnam/nevis_fake_data/integration_data.dat"
  InputFilename: "integration_data.dat"
  //InputFilename: "/home/nfs/gputnam/daq-dev2/srcs/sbndcode/sbndcode/VSTAnalysis/fcl/pipeline_example/output_working.dat"
  WaitTime: 1
  ChunkSize: 8192
  SamplesPerChannel: 7667
  NChannels: 640
}

event_builder: {
  expected_fragments_per_event: 10
  use_art: true
  print_event_store_stats: false
  verbose: false
  events_expected_in_SimpleQueueReader: @local::events_to_generate
}

physics: {
  producers:
  {
    daq:
    {
      wait_time: 0
      module_type: DaqDecoder
      produce_header: true
      validate_header: true
      baseline_calc: false
    }
  }

  analyzers:
  {
    VSTAnalysis:
    {
      module_type: VSTAnalysis
      producer_name: daq
      n_headers: 10

      threshold_calc: 3
      threshold_sigma: 5
      noise_range_sampling: 1
      use_planes: false
      verbose: false
      baseline_calc: 2
      refine_baseline: true

      fft_per_channel: true
      fill_waveforms: true
      timing: false
      sum_waveforms: true
      fft_summed_waveforms: true
      verbose: false
    }
  }

  filters: {}

  my_producer_modules: [daq]

  outstream: [out1]
  analyze: [VSTAnalysis]
  end_paths: [outstream, analyze]
}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName: "decoder_out.root"
    compressionLevel: 0
  }
}

services:
{
  TFileService: { fileName: "out.root"}
  VSTChannelMap: @local::nevis_integration_channel_map_VST
} 

source: {
  module_type: SBNDDAQInput
  waiting_time: 900
  resume_after_timeout: true
}

process_name: Driver


