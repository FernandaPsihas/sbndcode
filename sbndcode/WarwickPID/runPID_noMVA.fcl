#include "simulationservices_sbnd.fcl"
#include "calorimetry_sbnd.fcl"

process_name: LArPID

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "ntuple.root" }
  @table::sbnd_simulation_services # load simulation services in bulk

}

#services:
#{
#  # Load the service that manages root files for histograms.
#  TFileService: { fileName: "ntuple.root" }
#  Timing:       {}
#  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
#                @table::dunefd_services
#}


### Define input file format
source:
{
  module_type: RootInput
}

### Define output file format
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_pid.root" #default file name, can override from command line with -o or --output
   dataTier:    "full-reconstructed"
 }
}

### Define the modules and create chains
physics:
{
  producers:{
	pid: {
    		module_type:		"MVAPID"
		HitLabel:		"linecluster"
		#TrackLabel:		"pandora"
		TrackLabel:             "pandoraTrack"
		#ShowerLabel:		"pandora"
		ShowerLabel:            "pandoraShower"
		SpacePointLabel:	"pandora"
		TrackingLabel:		"largeant"	
                CalorimetryAlg:          @local::sbnd_calorimetryalgmc
#		MVAMethods:		[ "ANN","BDT" ]
#		WeightFiles:		[ "weights/MuEMVA_ANN.weights.xml", "weights/MuEMVA_BDT.weights.xml" ]
		MVAMethods:		[ ]
		WeightFiles:		[ ]
		CheatVertex:		true
   	}    				
  }

  ### Set up a chain of Producer modules
  reco: [ pid ]

  ### Set up the output stream
  stream1: [ out1 ]

  ### Set up the trigger paths (these are the modules that modify the event) 
  trigger_paths: [ reco ] 

  ### Set up the end paths (these are the modules that do not modify the event)
  end_paths: [ stream1 ]
}
