////////////////////////////////////////////////////////////////////////
// Class:       WrapperModule
// Module Type: analyzer
// File:        WrapperModule_module.cc
//
// Generated at Thu Oct 22 08:17:59 2015 by Andrzej Szelc using artmod
// from cetpkgsupport v1_08_07.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"


namespace mcr {
  class WrapperModule;
}

class mcr::WrapperModule : public art::EDAnalyzer {
public:
  explicit WrapperModule(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WrapperModule(WrapperModule const &) = delete;
  WrapperModule(WrapperModule &&) = delete;
  WrapperModule & operator = (WrapperModule const &) = delete;
  WrapperModule & operator = (WrapperModule &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;


private:

  // Declare member data here.

};


mcr::WrapperModule::WrapperModule(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{}

void mcr::WrapperModule::analyze(art::Event const & e)
{
  // Implementation of required member function here.
}

DEFINE_ART_MODULE(mcr::WrapperModule)
