#
# services
#
#include "simulationservices_sbnd.fcl"

#
# algorithms
#
#include "largeantmodules_sbnd.fcl"
#include "rootoutput_sbnd.fcl"


process_name: G4

services:
{
  # Load the service that manages root files for histograms.
  TFileService:        { fileName: @local::sbnd_tfileoutput.fileName }
                       @table::sbnd_g4_services
  FileCatalogMetadata: @local::sbnd_file_catalog_mc
}

#source is now a root file
source:
{
  module_type: RootInput
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   rns:      { module_type: "RandomNumberSaver" }
   largeant: @local::sbnd_largeant
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, largeant ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
              @table::sbnd_rootoutput # inherit shared settings
    dataTier: "simulated"
  }
}

# only keep MCParticles that cross the cryostat;
# this is relevant in extensive cosmic ray generators (like Corsika)
physics.producers.largeant.KeepParticlesInVolumes: ["volCryostat"] 
